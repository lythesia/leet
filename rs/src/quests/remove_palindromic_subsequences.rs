/**
 * [1332] Remove Palindromic Subsequences
 *
 * You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
A string is called palindrome if is one that reads the same backward as well as forward.
 
Example 1:
Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.

Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

 
Constraints:

	1 <= s.length <= 1000
	s[i] is either 'a' or 'b'.

 */
pub struct Solution {}

// submission codes start here

impl Solution {
    // because only 'a' and 'b' in string
    // if already pali, then 1
    // else: all 'a' form a pali, all 'b' form another, so 2
    pub fn remove_palindrome_sub(s: String) -> i32 {
        let (s, n) = (s.as_bytes(), s.len());
        if (0..n/2).all(|i| s[i] == s[n-1-i]) { 1 }
        else { 2 }
        // or
        // 2 - (0..n/2).all(|i| s[i] == s[n-1-i]) as i32
    }
}

// submission codes end

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test() {
        assert_eq!(1, Solution::remove_palindrome_sub("ababa".into()));
        assert_eq!(2, Solution::remove_palindrome_sub("abb".into()));
        assert_eq!(2, Solution::remove_palindrome_sub("baabb".into()));
    }
}
